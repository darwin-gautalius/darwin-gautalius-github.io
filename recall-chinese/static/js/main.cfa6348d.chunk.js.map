{"version":3,"sources":["app/Writer.tsx","app/data/data.ts","app/data/dictionary.ts","app/data/DataProvider.ts","app/Storage.tsx","app/config/showOutline.ts","app/pages/QuizPage.tsx","app/pages/AboutPage.tsx","app/App.tsx","app/AppProvider.tsx","serviceWorker.ts","index.tsx"],"names":["Writer","svgRef","createRef","hanziWriter","this","current","Error","props","character","showOutline","size","quiz","HanziWriter","create","width","height","padding","beginQuiz","hideOutline","hideCharacter","onComplete","summary","onQuizComplete","onCorrectStroke","strokeData","onQuizCorrectStroke","onMistake","onQuizMistake","highlightOnComplete","leniency","showHintAfterMisses","classNames","ref","className","classnames","Component","data","dictionary","savedHanzi","Object","keys","randomItem","items","Math","floor","random","length","createContextWithHook","StorageContext","useStorageContext","LOCAL_STORAGE_AVAILBLE","localStorage","LocalStorageProvider","storageKey","children","useState","getItem","JSON","parse","setData","useEffect","setItem","stringify","Provider","value","key","removeItem","newData","clear","useShowOutlineConfig","defaultValue","storage","useStorage","QuizPage","word","setWord","hanzi","split","pinyin","map","char","newHanzi","useWord","meaning","randomize","setCurrent","isComplete","setIsComplete","level","part","join","block","onClick","newCurrent","disabled","AboutPage","href","GithubFilled","HomeFilled","Header","Content","App","location","useLocation","setShowOutline","showSettingDrawer","setShowSettingDrawer","toggleSettingDrawer","theme","mode","selectedKeys","pathname","Item","to","type","ghost","icon","SettingOutlined","title","placement","closable","onClose","visible","onChange","checked","path","component","AppProvider","basename","process","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.cfa6348d.chunk.js","sourcesContent":["import classnames from 'classnames';\nimport React, { Component, createRef } from 'react';\nimport HanziWriter, { SummaryData, StrokeData } from 'hanzi-writer';\n\ninterface WriterProps {\n  size: number;\n  character: string;\n  showOutline?: boolean;\n  classNames?: string;\n  quiz?: boolean;\n  onQuizComplete?: (summary: SummaryData) => void;\n  onQuizCorrectStroke?: (strokeData: StrokeData) => void;\n  onQuizMistake?: (strokeData: StrokeData) => void;\n}\n\n// lazy to think about avoiding stale closure problem\nexport class Writer extends Component<WriterProps> {\n  svgRef = createRef<SVGSVGElement>();\n  hanziWriter: HanziWriter | null = null;\n\n  componentDidMount() {\n    if (!this.svgRef.current) {\n      throw new Error('cannot find SVG ref');\n    }\n    const { character, showOutline, size, quiz } = this.props;\n    this.hanziWriter = HanziWriter.create(this.svgRef.current, character, {\n      width: size,\n      height: size,\n      padding: size / 10,\n      showOutline,\n    });\n    if (quiz) {\n      this.beginQuiz();\n    }\n  }\n\n  componentDidUpdate() {\n    if (!this.hanziWriter) {\n      throw new Error('Cannot find instance of HanziWriter');\n    }\n    const { showOutline } = this.props;\n    if (showOutline) {\n      this.hanziWriter.showOutline();\n    } else {\n      this.hanziWriter.hideOutline();\n    }\n  }\n\n  beginQuiz() {\n    if (!this.hanziWriter) {\n      throw new Error('Cannot find instance of HanziWriter');\n    }\n    this.hanziWriter.hideOutline();\n    this.hanziWriter.hideCharacter();\n    this.hanziWriter.quiz({\n      onComplete: (summary) => {\n        if (this.props.onQuizComplete) {\n          this.props.onQuizComplete(summary);\n        }\n      },\n      onCorrectStroke: (strokeData) => {\n        if (this.props.onQuizCorrectStroke) {\n          this.props.onQuizCorrectStroke(strokeData);\n        }\n      },\n      onMistake: (strokeData) => {\n        if (this.props.onQuizMistake) {\n          this.props.onQuizMistake(strokeData);\n        }\n      },\n\n      highlightOnComplete: true,\n      leniency: 0.8,\n      showHintAfterMisses: true\n    });\n  }\n\n  render() {\n    const { size, classNames } = this.props;\n    return <svg ref={this.svgRef} width={size} height={size} className={classnames(\"bg-light b-1\", classNames)} />;\n  }\n}\n","import jsonData from './data.json';\n\nexport const data: Dictionary<string> = jsonData;","import jsonData from './dictionary.json';\nexport interface DictionaryData {\n  definition: string;\n  pinyin: string[],\n  decomposition: string;\n  radical: string;\n};\n\nexport const dictionary: Dictionary<DictionaryData> = jsonData;","import { useState } from 'react';\n\nimport { data } from './data';\nimport { dictionary } from './dictionary';\n\nconst savedHanzi = Object.keys(data);\n\nfunction randomItem<T>(items: T[]) {\n  const randomIndex = Math.floor(Math.random() * items.length);\n  return items[randomIndex];\n}\n\nexport function useWord(): [string[], string[][], string, () => void] {\n  const [word, setWord] = useState(randomItem(savedHanzi));\n  const randomize = () => {\n    let newHanzi: string;\n    do {\n      newHanzi = randomItem(savedHanzi);\n    } while (newHanzi === word);\n    setWord(newHanzi);\n  }\n  const hanzi = word.split('');\n  const pinyin = hanzi.map((char) => dictionary[char].pinyin);\n  return [hanzi, pinyin, data[word], randomize];\n}","import { createContextWithHook } from 'react-maid';\nimport React, { FC, useState, useEffect } from 'react';\n\ninterface Storage {\n  clear: () => void;\n  setItem: (key: string, value: any) => void;\n  getItem: (key: string) => any;\n  removeItem: (key: string) => any;\n}\n\nconst [StorageContext, useStorageContext] = createContextWithHook<Storage>(\n  'StorageContext'\n);\n\ninterface LocalStorageProviderProps {\n  storageKey?: string;\n}\n\nconst LOCAL_STORAGE_AVAILBLE = typeof localStorage !== 'undefined';\n\nexport const LocalStorageProvider: FC<LocalStorageProviderProps> = ({ storageKey = 'storage', children }) => {\n  const [data, setData] = useState(() => {\n    if (!LOCAL_STORAGE_AVAILBLE) {\n      const data = localStorage.getItem(storageKey);\n      if (data) {\n        return JSON.parse(data);\n      }\n    }\n    return {};\n  });\n\n  const setItem = (key: string, value: any) => {\n    setData({ ...data, [key]: value });\n  };\n\n  const getItem = (key: string) => {\n    return data[key];\n  };\n\n  const removeItem = (key: string) => {\n    const newData = { ...data };\n    delete newData[key];\n    setData(newData);\n  };\n\n  const clear = () => {\n    return setData({});\n  };\n\n  useEffect(() => {\n    if (LOCAL_STORAGE_AVAILBLE) {\n      localStorage.setItem(storageKey, JSON.stringify(data));\n    }\n  }, [storageKey, data]);\n\n  return (\n    <StorageContext.Provider value={{ setItem, getItem, removeItem, clear }}>\n      {children}\n    </StorageContext.Provider>\n  );\n};\n\nexport function useStorage<T>(key: string): [T | undefined, (value: T) => void];\nexport function useStorage<T>(key: string, defaultValue: T): [T, (value: T) => void];\nexport function useStorage<T>(key: string, defaultValue?: T): [T, (value: T) => void] {\n  const storage = useStorageContext();\n  const setItem = (value: T) => storage.setItem(key, value);\n  return [storage.getItem(key) || defaultValue, setItem];\n}\n","import { useStorage } from '../Storage';\n\nexport function useShowOutlineConfig() {\n  return useStorage<boolean>('showOutline', false);\n}","import { Button } from 'antd';\nimport React, { useState } from 'react';\n\nimport { Writer } from '../Writer';\nimport Title from 'antd/lib/typography/Title';\nimport { useWord } from '../data/DataProvider';\nimport { useShowOutlineConfig } from '../config/showOutline';\n\nexport const QuizPage = () => {\n  const [hanzi, pinyin, meaning, randomize] = useWord();\n  const [current, setCurrent] = useState(0);\n  const [isComplete, setIsComplete] = useState(false);\n  const [showOutline] = useShowOutlineConfig();\n  const markAsComplete = () => setIsComplete(true);\n  const next = () => {\n    const newCurrent = current + 1;\n    if (newCurrent === hanzi.length) {\n      setCurrent(0);\n      randomize();\n    } else {\n      setCurrent(newCurrent);\n    }\n\n    setIsComplete(false);\n  };\n  return (\n    <div>\n      <div className=\"my-md\">\n        <Title level={2}>Word:</Title>\n        <b>{pinyin.map((part) => part[0]).join(' ')}</b>: {meaning}\n      </div>\n      <div className=\"my-md\">\n        <div className=\"d-flex\">\n          <Title level={2}>Write It Down:</Title>\n        </div>\n        <div className=\"d-flex f-center\"><b>{pinyin[current].join(', ')}</b></div>\n        <div className=\"d-flex f-center my-xss\">\n          <Writer key={[current, hanzi[current]].join('')} showOutline={showOutline} character={hanzi[current]} size={256} quiz onQuizComplete={markAsComplete} />\n        </div>\n      </div>\n      <div className=\"my-lg\">\n        <Button block onClick={next} disabled={!isComplete}>Next Character</Button>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport Title from 'antd/lib/typography/Title';\nimport Paragraph from 'antd/lib/typography/Paragraph';\nimport { HomeFilled, GithubFilled } from '@ant-design/icons';\n\nexport const AboutPage = () => {\n  return (\n    <div className=\"my-md\">\n      <Title>Recall Chinese</Title>\n      <Title level={2}>About Recall Chinese</Title>\n      <Paragraph>\n        Recall Chinese is an app created to help the creator learn Chinese, and hopefully will help others too.\n        Currently this app only randomize word that the creator learned already.\n      </Paragraph>\n      <Paragraph>\n        This app is powered by a lot of amazing open-source projects:\n        <ul>\n          <li>\n            Pinyin &amp; Translations:<br />\n            <a href=\"https://github.com/skishore/makemeahanzi\"><GithubFilled /></a>&nbsp;\n          </li>\n          <li>\n            Graphic Data:<br />\n            <a href=\"https://github.com/chanind/hanzi-writer-data\"><GithubFilled /></a>&nbsp;\n          </li>\n          <li>\n            Writer:<br />\n            <a href=\"https://hanziwriter.org/\"><HomeFilled /></a>&nbsp;\n            <a href=\"https://github.com/chanind/hanzi-writer\"><GithubFilled /></a>&nbsp;\n          </li>\n        </ul>\n      </Paragraph>\n      <Title level={3}>Features</Title>\n      <Paragraph>\n        <ul>\n          <li>\n            <b>Randomize words</b>\n            : currently randomized based on words/phrases that the creator already know, inserted manually.\n          </li>\n          <li>\n            <b>List of randomizable words</b>\n            :\n          </li>\n          <li>\n            <b>List of KangXi Radicals</b>\n            : to help remember common pattern of the words\n          </li>\n        </ul>\n      </Paragraph>\n\n      <Title>About The Creator</Title>\n      <Paragraph>\n        Hi there! I'm Darwin, an Indonesian based front-end developer.\n        Due to COVID-19, I have nothing to do at home outside work, sleep, and sometimes play mobile games.\n        (Thankfully I'm lucky enough I don't lose job though.)\n        So, I set a lot of goals on these times at home. One of them is to learn Chinese language.\n        By the way, I'm Chinese by blood and I also have Chinese name given by my parents: 李金永.\n        But I can't speak Chinese (in any dialect) at all. :p\n        My parents used to speak Hakka dialect between them, so at least I can hear some common words. :D\n      </Paragraph>\n      <Paragraph>\n        On my journey of learning Chinese language, I have difficulty trying to read a lot of characters that I actually learned before.\n        So I created this app to help myself recall Chinese characters I learned.\n        Hopefully this app will help me a lot in recalling Chinese characters I learned.\n        If you are interested, I hope this app will help you too!\n      </Paragraph>\n    </div>\n  );\n};\n","import { Button, Drawer, Layout, Menu, Switch } from 'antd';\nimport React, { useState } from 'react';\nimport { Route, Switch as RouteSwitch, useLocation } from 'react-router';\nimport { Link } from 'react-router-dom';\n\nimport { QuizPage } from './pages/QuizPage';\nimport { AboutPage } from './pages/AboutPage';\nimport { SettingOutlined } from '@ant-design/icons';\nimport { useShowOutlineConfig } from './config/showOutline';\n\nconst { Header, Content } = Layout;\nexport const App = () => {\n  const location = useLocation();\n  const [showOutline, setShowOutline] = useShowOutlineConfig();\n\n  const [showSettingDrawer, setShowSettingDrawer] = useState(false);\n  const toggleSettingDrawer = () => setShowSettingDrawer((current) => !current);\n\n  return (\n    <Layout className=\"d-flex f-column h-100vh\">\n      <Header className=\"sticky\">\n        <div className=\"d-flex f-between\">\n          <Menu theme=\"dark\" mode=\"horizontal\" selectedKeys={[location.pathname]}>\n            <Menu.Item key=\"/\">\n              <Link to=\"/\">\n                Home\n              </Link>\n            </Menu.Item>\n            <Menu.Item key=\"/about\">\n              <Link to=\"/about\">\n                About\n              </Link>\n            </Menu.Item>\n          </Menu>\n\n          <Button type=\"link\" ghost onClick={toggleSettingDrawer} icon={<SettingOutlined />} />\n        </div>\n\n      </Header>\n      <Content className=\"f-grow px-md\">\n        <Drawer\n          title=\"Settings\"\n          placement=\"right\"\n          closable={false}\n          onClose={toggleSettingDrawer}\n          visible={showSettingDrawer}\n        >\n          <div className=\"d-flex f-between\">\n            Show Outline\n            <Switch title=\"Show Outline\" onChange={setShowOutline} checked={showOutline} />\n          </div>\n        </Drawer>\n        <Route>\n          <RouteSwitch>\n            <Route path=\"/about\" component={AboutPage} />\n            <Route path=\"/\" component={QuizPage} />\n          </RouteSwitch>\n        </Route>\n      </Content>\n    </Layout>\n  );\n};\n","import React, { FC } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { LocalStorageProvider } from './Storage';\n\nexport const AppProvider: FC = ({ children }) => {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <LocalStorageProvider>\n        {children}\n      </LocalStorageProvider>\n    </BrowserRouter>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App, AppProvider } from './app';\nimport * as serviceWorker from './serviceWorker';\n\nimport './styles/index.less';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppProvider>\n      <App />\n    </AppProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}